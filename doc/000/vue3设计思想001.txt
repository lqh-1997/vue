VNode 就是 virtual DOM

render 负责把VNode渲染到真实节点下 比如`render(vNode, document.getElementById('app'))`

mountElement 就是负责其中创建真实DOM 并且添加到容器中的具体操作(如果render中的vNode的tag是HTML中的类型)

mountComponent 同上 当render中的vNode的tag是一个组件(将`<div>`中的`div`称之为tag)



有状态组件 就是通过new一个对象 然后调用对象的render方法创建的组件

函数式组件 就是通过调用函数创建的组件



VNode设计

html标签

```javascript
const elementVNode = {
    tag: 'div',
    data: {   --->attribute
        style: {}
    },
    children: [  
    ]
}
const textVNode = {
    tag: null,
    data: null,
    children: '文本内容'
}
```

抽象内容 组件(可以通过判断tag的类型来知道VNode是否是一个普通标签)

```javascript
const elementVNode = {
    tag: 'div',
    data: null,
    children: {
        tag: MyCompoent,
        data: null
    }
}
```

Fragment 渲染一个片段 

Protol 可以将组件中的内容渲染到任何地方 比如说body

```javascript
const Protal = Symbol()
const portalVNode = {
    tag: Portal,
    data: {
        target: '#app'
    },
    children: {
        tag: 'div',
        data: {}
    }
}
```

位运算 少于32个 通过计算或的位操作 来进行分组



渲染器`render`的工作分为两个阶段 `mount`和`patch`

如果旧的VNode存在，就和旧的VNode对比，以最小的开销完成DOM更新 这个过程叫做`patch`

如果不存在，就直接将新的VNode挂载成全新的DOM，这个过程就叫做`mount`

如果新VNode不存在，仅删除旧VNode 就直接移除DOM



不同类型的VNode通过调用不同的方法来挂载(通过flag来区分VNode类型)